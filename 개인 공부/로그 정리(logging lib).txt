■ 1-1 Log Level : 로그의 '심각한 정도
	Level	Value	When to use
----------------------------------------------
	DEBUG	10	자세한 정보

	INFO	20	작업이 정상적이다는
			확인 메시지.

	WARNING    30	예상하지 못 한 문제가 발생하거나 발생 가능한 문제점을 명시
			, 작업은 정상적으로 진행

	ERROR	40	프로그램이 함수를 실행하지 못 할 정도의 심각한 문제

	CRITICAL 50	프로그램이 동작할 수 없을 정도의 심각한 문제.
-------------------------------------------------
  □ Python의 기본 logging 시스템의 레벨은 WARNING

■ 1-2 Root Logger를 이용하여 로그 생성하기
  - 가장 간단하게 로그를 생성하는 방법은 module-level로 정의되어 있는 root logger를 이용하는 방법
  ex) import logging
      loggin.warning('This is a warning message') # print
      logging.info('This si a info message') # no print
      logging.basicConfig(level=logging.INFO() # level change

      logging.basicConfig(
	format = '%(asctime)s:%(levelname)s:%(message)s',
  	datefmt = '%m/%d/%Y %I:%M:%S %p',
  	level = logging.DEBUG
	)
      logging.debug('This is a formatted debug message') 
      # 03/12/2019 05:20:12 PM:DEBUG:This is a formatted debug message

◆ Step 2: 역할 분담하기
  ◇ Loggers : 어플리케이션 코드가 직접 사용할 수 있는 인터페이스를 제공한다.
  ◇ Handlers : Loggers에 의해 생성된 LogRecord를 처리하여 적절한 위치로 보낸다.
  ◇ Filters : 출력되어야 하는 로그를 필터링한다.
  ◇ Formatters : LogRecord의 출력 형태를 지정한다. 
  
  ◇ 2-1. Loggers
     Logger는 세가지 주요 역할을 합니다.
	1. 로그를 생성할 수 있는 method를 제공해줍니다. (Logger.debug(), Logger.info(), ...)
	2. 로그 레벨과 Logger에 적용된 filter를 바탕으로 처리해야 할 메시지를 판단합니다.
	3. 적절한 Handler들에게 로그 메시지에 부가정보가 더해진 LogRecord 인스턴스를 전달해줍니다.
     Logger 오브젝트는 logging.getLogger(name) method를 통해 사용할 수 있습니다. 
     
     
     ● name이 주어진 경우, 해당 이름에 해당하는 logger를, name이 주어지지 않은 경우 root logger를 전         달받습니다.
     
     ● name은 마침표(.)로 구분되는 계층구조를 가지고 있습니다. 예를 들어, getLogger('foo.bar')는                   getLogger('foo')의 자식 logger를 반환합니다.
     
     ● Logger의 레벨이 정해지지 않은 경우 (logger.setLevel(...)을 설정해주지 않은 경우), 자신의 부모                 logger의 레벨을 사용합니다. 부모의 로그 레벨이 정해지지 않은 경우, 그 부모의 로그 레벨을 참조하           는 식으로 반복됩니다. Root logger는 항상 로그 레벨이 설정되어있습니다. (기본값 WARNING)
     
     ● 자식 logger는 메시지를 자기 부모 logger의 handler에게 propagate합니다. 따라서, 부모 logger에              handler가 설정되어 있는 경우라면, 자식 logger에서 handler를 다시 설정해야 하는 중복 업무를 줄일          수 있습니다. (Logger.propagate = False로 설정해줌으로써, propagation을 막을 수 있습니다.)
    
  ◇ 2-2. Handlers
     Handler는 로그 메시지를 출력하는 역할을 합니다. Useful Handlers에서 Handler의 종류를 확인할 수 있     습니다.

     Handler를 설정하는 method는 다음과 같습니다.
        ● Handler.setLevel() : 처리할 메시지의 최소 레벨을 설정합니다. Logger의 설정 레벨과 다를 수 있습            니다. Logger에서는 통과가 된 로그 메시지가 Handler에서 filtering 될 수 있습니다.

        ● Handler.setFormatter() : Handler가 사용할 formatter를 설정합니다.

        ● Handler.addFilter(), Handler.removeFilter() : Filter 오브젝트를 추가하고 제거합니다.



